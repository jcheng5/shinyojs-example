---
title: "Visualizing 1 million points with OJS"
code-tools: true
echo: false
---

This example visualizes 1 million x/y points using 2D binning. The user can choose the number of bins.

This example is not a great fit for pure OJS, due to the size of the data to be downloaded (32MB) and the amount of time it takes `Plot.bin` to handle the data.

::: {.alert .alert-info}
**Note:** Choosing larger values for "Bins" may cause your browser to become unresponsive for several seconds.
:::

```{ojs}
points = FileAttachment("points.csv").csv({typed: true})
```

```{ojs}
viewof bins = Inputs.range([10, 100], {value: 10, step: 1, label: "Bins"})
bins_debounced = debounce(viewof bins)
```

```{ojs}
Plot.plot({
  width: 600,
  height: 600,
  color: {
    scheme: "blues"
  },
  marks: [
    Plot.rect(points,
      Plot.bin({fill: "count"}, {
        x: {value: "x", thresholds: bins_debounced},
        y: {value: "y", thresholds: bins_debounced},
        inset: false
      })
    )
  ]
})
```

```{ojs}
function debounce(input, delay = 1000) {
  return Generators.observe(notify => {
    let timer = null;

    // On input, check if we recently reported a value.
    // If we did, do nothing and wait for a delay;
    // otherwise, report the current value and set a timeout.
    function inputted() {
      if (timer) {
        clearTimeout(timer);
      }
      timer = setTimeout(delayed, delay);
    }

    // After a delay, check if the last-reported value is the current value.
    // If itâ€™s not, report the new value.
    function delayed() {
      timer = null;
      notify(input.value);
    }

    input.addEventListener("input", inputted), inputted();
    return () => input.removeEventListener("input", inputted);
  });
}
```
